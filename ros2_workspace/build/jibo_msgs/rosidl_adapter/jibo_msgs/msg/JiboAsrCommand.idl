// generated from rosidl_adapter/resource/msg.idl.em
// with input from jibo_msgs/msg/JiboAsrCommand.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module jibo_msgs {
  module msg {
    module JiboAsrCommand_Constants {
      @verbatim (language="comment", text=
        "Commands. The ASR node can publish results (transcript plus confidence value)" "\n"        "for three kinds of things:" "\n"        "(1) the final result (i.e., the final result with the highest confidence)," "\n"        "(2) interim results that are not final, with a stability measure indicating" "\n"        "    how likely it is that the result will change, and" "\n"        "(3) alternative results, which are other phrases that might be what you said," "\n"        "    but aren't as good a guess as the top alternative" "\n"        "Thus, you can tell the ASR node to start or stop sending any of these.")
      const int8 STOP = 0;
      const int8 START = 1;
    };
    @verbatim (language="comment", text=
      "Message for telling the ASR node to start or stop streaming audio to Google" "\n"
      "for processing.")
    struct JiboAsrCommand {
      @verbatim (language="comment", text=
        "Standard ROS header.")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Listen for \"Hey, Jibo\" first.")
      boolean heyjibo;

      @verbatim (language="comment", text=
        "Continuously listen and publish asr result.")
      boolean continuous;

      boolean incremental;

      boolean alternatives;

      boolean detectend;

      @verbatim (language="comment", text=
        "Path to a rule file, e.g. \"src/rules/test.rule\"" "\n"
        "or a Jibo NLU rule script.")
      string rule;

      @verbatim (language="comment", text=
        "Command. Use the constants defined below.")
      int8 command;
    };
  };
};
